494/600
sum(q)
465/600
465+494
959/1200
require(fpp)
require(forecast)
require(psych)
head(fuel) #header data for the dataset...fuel data set is in the fpp library
summary(fuel) #five number summary of the fuel data set
describe(fuel)
fuel$mixmpg=.8*fuel$City+.2*fuel$Highway #mixes the city and highway mpgs into a new variable
mylm=lm(Carbon~mixmpg+Litres,data=fuel) #lm is linear model.  ~ means as a function of.
pairs(~Carbon+mixmpg+Litres, data=fuel)
summary(mylm)
plot(mylm)
newdata = data.frame(mixmpg=.8*30+.2*44, Litres= 1.7) #for forecasting
myfcast=forecast(mylm, newdata)   #forecast on mylm using newdata
myfcast
is.ts(ausbeer) # is this a time series?  If it's not true, define it that way.
ausbeer
plot(ausbeer)
newaus=ts(ausbeer[145:211], start=c(1992,1), frequency=4) #cut the time series and define as a new ts
plot(newaus)
myARIMA=auto.arima(newaus)
myfcast2=forecast(myARIMA,12)
plot(myfcast2)
is.ts(elecsales) #are the data in time series format...?  is.ts == TRUE
elecsales  #provide the time series header
plot(elecsales) #plot of the time series...
myAR=arima(elecsales, order=c(3,0,0)) #3d order auto-regressive model
myfcast3=forecast(myAR,4)
plot(myfcast3)
A=c(1,2,3)
B=c(1,2,3)
A*B
t(A)%*%B
A%*%t(B)
myvector=c(1,2,3,4,5)
myvector[4]
mymatrix=matrix(c(1,2,3,4,5,6),nrow=3)
mymatrix
mylist=list("mean="=mean(myvector), "sd="=sd(myvector))
mylist
mylist$mean
data=c("red","red","blue","blue","blue","green")
mytable=table(data)
mytable[1]
y=rnorm(100)
x=rnorm(100)
mylm=lm(y~x)
summary(mylm)
echo "# portfolio" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/sth13/portfolio.git
git push -u origin master
?git
??git
library(httr)
?httr
httr::oauth_endpoints()
oauth2.0_token()
oauth2.0_token
install.packages('ffanalyitcs')
require(ffanalytics)
install.packages(c("devtools","rstudioapi"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages('ffanalyitcs')
devtools::install_github(repo = "dadrivr/ffanalytics")
library(ffanalytics)
?ffanalytics
?`ffanalytics-package`
??`ffanalytics-package`
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1, 5, 7, 18, 27), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
ffanalytics::analysts
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1,4,5,8,18,29), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2)),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
)
scoringRules <- list(
+   QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
+                               multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2)),
+   RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
+                               multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
+   WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
+                               multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
+   TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
+                               multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
+   K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
+                              multiplier = c(1, 3, 3, 3, 4, 5)),
+   DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
+                                multiplier = c(2, 2, 2, 1, 6, 2)),
+ )
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2))
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2)),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2,-2)),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
scoringRules
scoringRules <- list(
QB = data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2,-2)),
RB = data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
scoringRules$QB
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2,-2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts","fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2)),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts","fumbles"), multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2)),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"), multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"), multiplier = c(1, 3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"), multiplier = c(2, 2, 2, 1, 6, 2)),)
ffanalytics::getLeagueSettings()
?ffanalytics::getLeagueSettings
??ffanalytics::getLeagueSettings
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -3, 1/10, 6, 2, -3 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1,  3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 1.5)),
DL = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
LB =  data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
DB = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
ptsBracket = data.table::data.table(threshold = c(0, 6, 20, 34, 99),
points = c(10, 7, 4, 0, -4))
)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 0, 1/8, 6, 6, 2, -3)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1,  3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 1.5)),
DL = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
LB =  data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
DB = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
ptsBracket = data.table::data.table(threshold = c(0, 6, 20, 34, 99),
points = c(10, 7, 4, 0, -4))
)
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/25, 4, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1,  3, 3, 3, 4, 5)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
DL = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
LB =  data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
DB = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
ptsBracket = data.table::data.table(threshold = c(0, 6, 20, 34, 99),
points = c(10, 7, 4, 0, -4))
)
myProjections <- getProjections(scrapeData, avgMethod = "average", leagueScoring = userScoring, teams = 10, format = "standard", mflMocks = -1, mflLeagues = -1, adpSources = c("CBS", "ESPN", "FFC", "MFL", "NFL"))
myProjections <- getProjections(scrapeData, avgMethod = "average", leagueScoring = scoringRules, teams = 10, format = "standard", mflMocks = -1, mflLeagues = -1, adpSources = c("CBS", "ESPN", "FFC", "MFL", "NFL"))
myProjections
View(myProjections)
myProjections$projections
View(myProjections$projections)
1229.7*.1
11.7*6
77.8*.5
783*.1
4.1*6
122.97+70.2+38.9+78.3
310.37+24.6
write.csv(myProjections$projections, file="fantasy17_projections.csv", row.names=FALSE)
getwd()
library(ffanalytics)
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1,4,5,8,18,29), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
?getADPdata
?ADPsource
??ADPsource
ffanalytics::analystOptions()
ffanalytics::analysts
myProjections <- getProjections(scrapeData, avgMethod = "average", leagueScoring = scoringRules, teams = 10, format = "ppr", mflMocks = -1, mflLeagues = -1, adpSources = c("CBS", "ESPN", "FFC", "MFL", "NFL"))
View(myProjections$projections)
View(myProjections$projections)
View(myProjections$projections)
1/25
35*.04
1/35
35*.02857143
400*.02857143
library(ffanalytics)
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1,4,5,8,18,29), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/35, 6, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1,  3, 3, 3, 3, 4)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
DL = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
LB =  data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
DB = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
ptsBracket = data.table::data.table(threshold = c(0, 6, 20, 34, 99),
points = c(10, 7, 4, 0, -4))
)
myProjections <- getProjections(scrapeData, avgMethod = "average", leagueScoring = scoringRules, teams = 10, format = "ppr", mflMocks = -1, mflLeagues = -1, adpSources = c("CBS", "ESPN", "FFC", "MFL", "NFL"))
View(myProjections$projections)
write.csv(myProjections$projections, file="randy_fantasy17_projections.csv", row.names=FALSE)
library(ffanalytics)
scrapeData <- runScrape(week = 1, season = 2017, analysts = c(-1,4,5,8,18,29), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
scoringRules <- list(
QB = data.table::data.table(dataCol = c("passYds", "passTds", "passInt", "rushYds", "rushTds", "twoPts", "fumbles"),
multiplier = c(1/35, 6, -2, 1/10, 6, 2, -2 )),
RB = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
WR = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
TE = data.table::data.table(dataCol = c("rushYds", "rushTds", "rec", "recYds", "recTds", "returnTds", "twoPts", "fumbles"),
multiplier = c(1/10, 6, 1/2, 1/10, 6, 6, 2, -2)),
K = data.table::data.table(dataCol = c("xp", "fg0019", "fg2029", "fg3039", "fg4049", "fg50"),
multiplier = c(1,  3, 3, 3, 3, 4)),
DST = data.table::data.table(dataCol = c("dstFumlRec", "dstInt", "dstSafety", "dstSack", "dstTd", "dstBlk"),
multiplier = c(2, 2, 2, 1, 6, 2)),
DL = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
LB =  data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
DB = data.table::data.table(dataCol = c("idpSolo", "idpAst", "idpSack", "idpInt", "idpFumlForce", "idpFumlRec", "idpPD", "idpTd", "idpSafety"),
multiplier = c(1, 0.5, 2, 3, 3, 2, 1, 6, 2)),
ptsBracket = data.table::data.table(threshold = c(0, 6, 20, 34, 99),
points = c(10, 7, 4, 0, -4))
)
myProjections <- getProjections(scrapeData, avgMethod = "average", leagueScoring = scoringRules, teams = 10, format = "ppr", mflMocks = -1, mflLeagues = -1, adpSources = c("CBS", "ESPN", "FFC", "MFL", "NFL"))
#View(myProjections$projections)
write.csv(myProjections$projections, file="week_one_randy_fantasy17_projections.csv", row.names=FALSE)
library(ffanalytics)
scrapeData <- runScrape(week = 1, season = 2017, analysts = c(-1,4,5,8,18,29), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
View(scrapeData)
scrapeData
myProjections
myProjections <- getProjections(scrapeData)
View(myProjections)
getwd()
setwd("C:/Users/herma/Desktop/Northwestern/Predict_411_Generalized_Linear_Models/Assignment_3")
knitr::opts_chunk$set(echo = FALSE)
library(rticles)
library(stringr)
library(ggplot2)
library(lattice)
library(lubridate)
library(plotly)
install.packages('plotly')
library(stringr)
library(ggplot2)
library(lattice)
library(lubridate)
library(plotly)
library(moments)
library(tidyverse)
library(car)
library(rpart)
library(rpart.plot)
install.packages('rpart.plot')
install.packages('party')
library(stringr)
library(ggplot2)
library(lattice)
library(lubridate)
library(plotly)
library(moments)
library(tidyverse)
library(car)
library(rpart)
library(rpart.plot)
library(party)
WINE<- read.csv('wine.csv',stringsAsFactors = FALSE)
summary(WINE)
str(WINE)
#Impute Variables with NA Values
WINE$ResidualSugar<- recode(WINE$ResidualSugar,"NA=5.4187331")
WINE$Chlorides<- recode(WINE$Chlorides,"NA=0.0548225")
WINE$FreeSulfurDioxide<- recode(WINE$FreeSulfurDioxide,"NA=30.8455713")
WINE$TotalSulfurDioxide<- recode(WINE$TotalSulfurDioxide,"NA=120.7142326")
WINE$pH<-recode(WINE$pH,"NA=3.2076282")
WINE$Sulphates<- recode(WINE$Sulphates,"NA=0.5271118")
WINE$Alcohol<- recode(WINE$Alcohol,"NA=10.4892363")
WINE$STARS<- recode(WINE$STARS,"NA=2")
summary(WINE)
fit<- ctree(WINE$TARGET ~ WINE$LabelAppeal)
plot(fit, main="")
fit<- ctree(WINE$TARGET ~ WINE$STARS)
plot(fit)
fit<- ctree(WINE$STARS ~ WINE$LabelAppeal)
plot(fit)
fit<- ctree(WINE$TARGET~ WINE$AcidIndex)
plot(fit)
fit<- ctree(WINE$STARS ~ WINE$AcidIndex + WINE$Alcohol)
plot(fit)
library(MASS)  # includes functions for multidimensional scaling
# Product Positioning of Entertainment Events and Activities (R)
library(MASS)  # includes functions for multidimensional scaling
library(wordcloud)  # textplot utility to avoid overlapping text
USE_METRIC_MDS <- FALSE  # metric versus non-metric toggle
# utility function for converting a distance structure
# to a distance matrix as required for some routines and
# for printing of the complete matrix for visual inspection.
make.distance.matrix <- function(distance_structure)
{ n <- attr(distance_structure, "Size")
full <- matrix(0,n,n)
full[lower.tri(full)] <- distance_structure
full+t(full)
}
# enter data into a distance structure as required for various
# distance-based routines. That is, we enter the upper triangle
# of the distance matrix as a single vector of distances
distance_structure <-
as.single(c(6,11,5,8,15,14,10,3,2,19,18,9,4,17,16,7,13,12,21,20,1))
# provide a character vector of entertainment event or activity names
activity_names <-
c("Comedy", "Symphony", "Zoo", "Pop Music", "Museum", "Hockey", "Football")
attr(distance_structure, "Size") <- length(activity_names)  # set size attribute
# check to see that the distance structure has been entered correctly
# by converting the distance structure to a distance matrix
# using the utility function make.distance.matrix, which we had defined
distance_matrix <- unlist(make.distance.matrix(distance_structure))
cat("\n","Distance Matrix of Seven Activities","\n")
print(distance_matrix)
if (USE_METRIC_MDS)
{
# apply the metric multidimensional scaling algorithm and plot the map
mds_solution <- cmdscale(distance_structure, k=2, eig=T)
}
# apply the non-metric multidimensional scaling algorithm
# this is more appropriate for rank-order data
# and provides a more satisfactory solution here
if (!USE_METRIC_MDS)
{
mds_solution <- isoMDS(distance_matrix, k = 2, trace = FALSE)
}
pdf(file = "plot_nonmetric_mds_seven_activities.pdf",
width=8.5, height=8.5) # opens pdf plotting device
# use par(mar = c(bottom, left, top, right)) to set up margins on the plot
par(mar=c(7.5, 7.5, 7.5, 5))
# original solution
First_Dimension <- mds_solution$points[,1]
Second_Dimension <- mds_solution$points[,2]
# set up the plot but do not plot points... use names for points
plot(First_Dimension, Second_Dimension, type = "n", cex = 1.5,
xlim = c(-15, 15), ylim = c(-15, 15))  # first page of pdf plots
# We plot the sport names in the locations where points normally go.
text(First_Dimension, Second_Dimension, labels = activity_names,
offset = 0.0, cex = 1.5)
title("Seven Activities (initial solution)")
# reflect the horizontal dimension
# multiply the first dimension by -1 to get reflected image
First_Dimension <- mds_solution$points[,1] * -1
Second_Dimension <- mds_solution$points[,2]
plot(First_Dimension, Second_Dimension, type = "n", cex = 1.5,
xlim = c(-15, 15), ylim = c(-15, 15))  # second page of pdf plots
text(First_Dimension, Second_Dimension, labels = activity_names,
offset = 0.0, cex = 1.5)
title("Seven Activities (horizontal reflection)")
# reflect the vertical dimension
# multiply the section dimension by -1 to get reflected image
First_Dimension <- mds_solution$points[,1]
Second_Dimension <- mds_solution$points[,2] * -1
plot(First_Dimension, Second_Dimension, type = "n", cex = 1.5,
xlim = c(-15, 15), ylim = c(-15, 15))  # third page of pdf plots
text(First_Dimension, Second_Dimension, labels = activity_names,
offset = 0.0, cex = 1.5)
title("Seven Activities (vertical reflection)")
# multiply the first and second dimensions by -1
# for reflection in both horizontal and vertical directions
First_Dimension <- mds_solution$points[,1] * -1
Second_Dimension <- mds_solution$points[,2] * -1
plot(First_Dimension, Second_Dimension, type = "n", cex = 1.5,
xlim = c(-15, 15), ylim = c(-15, 15))  # fourth page of pdf plots
text(First_Dimension, Second_Dimension, labels = activity_names,
offset = 0.0, cex = 1.5)
title("Seven Activities (horizontal and vertical reflection)")
dev.off()  # closes the pdf plotting device
pdf(file = "plot_pretty_original_mds_seven_activities.pdf",
width=8.5, height=8.5) # opens pdf plotting device
# use par(mar = c(bottom, left, top, right)) to set up margins on the plot
par(mar=c(7.5, 7.5, 7.5, 5))
First_Dimension <- mds_solution$points[,1]  # no reflection
Second_Dimension <- mds_solution$points[,2]   # no reflection
# wordcloud utility for plotting with no overlapping text
textplot(x = First_Dimension,
y = Second_Dimension,
words = activity_names,
show.lines = FALSE,
xlim = c(-15, 15),  # extent of horizontal axis range
ylim = c(-15, 15),  # extent of vertical axis range
xaxt = "n",  # suppress tick marks
yaxt = "n",  # suppress tick marks
cex = 1.15,  # size of text points
mgp = c(0.85, 1, 0.85),  # position of axis labels
cex.lab = 1.5,  # magnification of axis label text
xlab = "First Dimension",
ylab = "Second Dimension")
dev.off()  # closes the pdf plotting device
